// <auto-generated />
using System;
using Documentt.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Documentt.Migrations
{
    [DbContext(typeof(TailieuContextDB))]
    partial class TailieuContextDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Documentt.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Documentt.Models.Authour", b =>
                {
                    b.Property<int>("AuthourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthourId"));

                    b.Property<string>("AuthourName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("noibat")
                        .HasColumnType("bit");

                    b.HasKey("AuthourId");

                    b.ToTable("Authours");

                    b.HasData(
                        new
                        {
                            AuthourId = 1,
                            AuthourName = "Nguyễn Ngọc Vỹ",
                            Detail = "Chuyên gia kinh tế với 10 năm kinh nghiệm giảng dạy.",
                            Img = "https://i.pinimg.com/564x/a8/5a/75/a85a7549a2926f1698af2709f40aafed.jpg",
                            noibat = true
                        },
                        new
                        {
                            AuthourId = 2,
                            AuthourName = "Anh Ngọc Vỹ",
                            Detail = "Giảng viên lập trình, tác giả nhiều tài liệu về JavaScript..",
                            Img = "https://minhtuanmobile.com/uploads/blog/bo-hinh-nen-meme-meo-duong-tang-thinh-ca-cuc-cute-dang-them-hinh-240216120205.jpg",
                            noibat = true
                        },
                        new
                        {
                            AuthourId = 3,
                            AuthourName = "Vỹ DZ",
                            Detail = "Tiến sĩ Toán học, chuyên cung cấp tài liệu Toán cao cấp.",
                            Img = "https://2vet.vn/wp-content/uploads/2024/07/meme-cho-meo-cute-3-03-11-27-39.jpg",
                            noibat = true
                        },
                        new
                        {
                            AuthourId = 4,
                            AuthourName = "Soái Ca Cam Ranh",
                            Detail = "Kỹ sư cơ khí, tác giả tài liệu kỹ thuật nổi tiếng.",
                            Img = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcROwlC-Q9wKSBkgT8fDECsIrJj3mFjfsVOpcQ&s",
                            noibat = true
                        });
                });

            modelBuilder.Entity("Documentt.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Kinh Tế"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Lập trình"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Toán học"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Kỹ thuật"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Khoa học dữ liệu"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Vật lý"
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "Thiết kế"
                        },
                        new
                        {
                            CategoryId = 8,
                            CategoryName = "Hóa học"
                        },
                        new
                        {
                            CategoryId = 9,
                            CategoryName = "Ngôn ngữ học"
                        },
                        new
                        {
                            CategoryId = 10,
                            CategoryName = "Quản trị kinh doanh"
                        });
                });

            modelBuilder.Entity("Documentt.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Documentt.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Documentt.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Documentt.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("AuthourId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("New")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Trending")
                        .HasColumnType("bit");

                    b.Property<string>("img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("AuthourId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            AuthourId = 1,
                            CategoryId = 1,
                            Description = "Tài liệu Kinh tế cơ bản.",
                            Name = "Tài Liệu Kinh Tế V1",
                            New = true,
                            Price = 50000m,
                            Trending = true,
                            img = "https://storage.googleapis.com/onthisinhvien.appspot.com/images/237670237-1706179100848-snapedit_1706179072311.png",
                            link = "https://drive.google.com/file/d/1lQGn8qZV2esjBOc0-UpR6_iGUivWr5Jk/view"
                        },
                        new
                        {
                            ProductId = 2,
                            AuthourId = 2,
                            CategoryId = 2,
                            Description = "Tài liệu hướng dẫn lập trình Python từ cơ bản đến nâng cao cho người mới bắt đầu.",
                            Name = "Giáo trình Lập trình Python cơ bản",
                            New = true,
                            Price = 75000m,
                            Trending = false,
                            img = "https://storage.googleapis.com/onthisinhvien.appspot.com/images/default_python_book.png",
                            link = "https://drive.google.com/file/d/example_python_link/view"
                        },
                        new
                        {
                            ProductId = 3,
                            AuthourId = 3,
                            CategoryId = 3,
                            Description = "Bộ sưu tập các đề thi và lời giải chi tiết môn Toán cao cấp A1.",
                            Name = "Tuyển tập đề thi Toán cao cấp A1",
                            New = false,
                            Price = 60000m,
                            Trending = true,
                            img = "https://storage.googleapis.com/onthisinhvien.appspot.com/images/default_math_book.png",
                            link = "https://drive.google.com/file/d/example_math_link/view"
                        },
                        new
                        {
                            ProductId = 4,
                            AuthourId = 4,
                            CategoryId = 4,
                            Description = "Tổng hợp kiến thức cơ bản và công thức thiết yếu trong kỹ thuật điện tử.",
                            Name = "Sổ tay Kỹ thuật Điện tử căn bản",
                            New = true,
                            Price = 45000m,
                            Trending = false,
                            img = "https://storage.googleapis.com/onthisinhvien.appspot.com/images/default_engineering_book.png",
                            link = "https://drive.google.com/file/d/example_electronics_link/view"
                        },
                        new
                        {
                            ProductId = 5,
                            AuthourId = 1,
                            CategoryId = 5,
                            Description = "Tài liệu giới thiệu về Khoa học dữ liệu và cách sử dụng ngôn ngữ R.",
                            Name = "Nhập môn Khoa học dữ liệu với R",
                            New = true,
                            Price = 90000m,
                            Trending = true,
                            img = "https://storage.googleapis.com/onthisinhvien.appspot.com/images/default_data_science_book.png",
                            link = "https://drive.google.com/file/d/example_data_science_link/view"
                        },
                        new
                        {
                            ProductId = 6,
                            AuthourId = 1,
                            CategoryId = 6,
                            Description = "Tập hợp các bài tập Vật lý Đại cương kèm lời giải chi tiết.",
                            Name = "Bài tập Vật lý Đại cương A",
                            New = false,
                            Price = 55000m,
                            Trending = false,
                            img = "https://storage.googleapis.com/onthisinhvien.appspot.com/images/default_physics_book.png",
                            link = "https://drive.google.com/file/d/example_physics_link/view"
                        });
                });

            modelBuilder.Entity("Documentt.Models.ShopingcartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Documentt.Models.OrderDetail", b =>
                {
                    b.HasOne("Documentt.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Documentt.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Documentt.Models.Product", b =>
                {
                    b.HasOne("Documentt.Models.Authour", "Authour")
                        .WithMany("Products")
                        .HasForeignKey("AuthourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Documentt.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authour");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Documentt.Models.ShopingcartItem", b =>
                {
                    b.HasOne("Documentt.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Documentt.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Documentt.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Documentt.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Documentt.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Documentt.Models.Authour", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Documentt.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Documentt.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
